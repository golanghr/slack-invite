// Code generated by protoc-gen-go.
// source: protos/slackinvite.proto
// DO NOT EDIT!

/*
Package slackinvite is a generated protocol buffer package.

It is generated from these files:
	protos/slackinvite.proto

It has these top-level messages:
	Request
	Stats
	Invite
*/
package slackinvite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Request struct {
	// Slack Invite related fields
	FirstName string `protobuf:"bytes,1,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=LastName" json:"LastName,omitempty"`
	Email     string `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Stats struct {
	Active []string `protobuf:"bytes,1,rep,name=Active" json:"Active,omitempty"`
	Away   []string `protobuf:"bytes,2,rep,name=Away" json:"Away,omitempty"`
	Admins []string `protobuf:"bytes,3,rep,name=Admins" json:"Admins,omitempty"`
	Total  int64    `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}

type Invite struct {
	Ok    bool   `protobuf:"varint,1,opt,name=Ok" json:"Ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (m *Invite) Reset()         { *m = Invite{} }
func (m *Invite) String() string { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Request)(nil), "slackinvite.Request")
	proto.RegisterType((*Stats)(nil), "slackinvite.Stats")
	proto.RegisterType((*Invite)(nil), "slackinvite.Invite")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Slack service

type SlackClient interface {
	Stats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stats, error)
	Invite(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Invite, error)
}

type slackClient struct {
	cc *grpc.ClientConn
}

func NewSlackClient(cc *grpc.ClientConn) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) Stats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := grpc.Invoke(ctx, "/slackinvite.Slack/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slackClient) Invite(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Invite, error) {
	out := new(Invite)
	err := grpc.Invoke(ctx, "/slackinvite.Slack/Invite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slack service

type SlackServer interface {
	Stats(context.Context, *Request) (*Stats, error)
	Invite(context.Context, *Request) (*Invite, error)
}

func RegisterSlackServer(s *grpc.Server, srv SlackServer) {
	s.RegisterService(&_Slack_serviceDesc, srv)
}

func _Slack_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlackServer).Stats(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Slack_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlackServer).Invite(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Slack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slackinvite.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Slack_Stats_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Slack_Invite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
