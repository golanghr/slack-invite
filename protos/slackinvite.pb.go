// Code generated by protoc-gen-go.
// source: protos/slackinvite.proto
// DO NOT EDIT!

/*
Package slackinvite is a generated protocol buffer package.

It is generated from these files:
	protos/slackinvite.proto

It has these top-level messages:
	SlackInviteRequest
	SlackInvite
*/
package slackinvite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SlackInviteRequest struct {
}

func (m *SlackInviteRequest) Reset()         { *m = SlackInviteRequest{} }
func (m *SlackInviteRequest) String() string { return proto.CompactTextString(m) }
func (*SlackInviteRequest) ProtoMessage()    {}

type SlackInvite struct {
	Active []string `protobuf:"bytes,1,rep,name=Active" json:"Active,omitempty"`
	Away   []string `protobuf:"bytes,2,rep,name=Away" json:"Away,omitempty"`
	Admins []string `protobuf:"bytes,3,rep,name=Admins" json:"Admins,omitempty"`
	Total  int64    `protobuf:"varint,4,opt,name=Total" json:"Total,omitempty"`
}

func (m *SlackInvite) Reset()         { *m = SlackInvite{} }
func (m *SlackInvite) String() string { return proto.CompactTextString(m) }
func (*SlackInvite) ProtoMessage()    {}

func init() {
	proto.RegisterType((*SlackInviteRequest)(nil), "slackinvite.SlackInviteRequest")
	proto.RegisterType((*SlackInvite)(nil), "slackinvite.SlackInvite")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Slack service

type SlackClient interface {
	TeamDetails(ctx context.Context, in *SlackInviteRequest, opts ...grpc.CallOption) (*SlackInvite, error)
}

type slackClient struct {
	cc *grpc.ClientConn
}

func NewSlackClient(cc *grpc.ClientConn) SlackClient {
	return &slackClient{cc}
}

func (c *slackClient) TeamDetails(ctx context.Context, in *SlackInviteRequest, opts ...grpc.CallOption) (*SlackInvite, error) {
	out := new(SlackInvite)
	err := grpc.Invoke(ctx, "/slackinvite.Slack/TeamDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Slack service

type SlackServer interface {
	TeamDetails(context.Context, *SlackInviteRequest) (*SlackInvite, error)
}

func RegisterSlackServer(s *grpc.Server, srv SlackServer) {
	s.RegisterService(&_Slack_serviceDesc, srv)
}

func _Slack_TeamDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SlackInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SlackServer).TeamDetails(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Slack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slackinvite.Slack",
	HandlerType: (*SlackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TeamDetails",
			Handler:    _Slack_TeamDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
